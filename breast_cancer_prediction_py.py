# -*- coding: utf-8 -*-
"""Breast Cancer Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gnDB4UuteHmb4Al9xDUxNCAnzadFeaOA

# Import File Dataset in Kaggle
"""

# Ambil dataset dari kaggle di collab

from google.colab import files
!pip install -q kaggle # Install Kaggle
files.upload() # Upload file kaggle.json
!rm -r ~/.kaggle
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d merishnasuwal/breast-cancer-prediction-dataset  # Download dataset dari Kaggle

!unzip breast-cancer-prediction-dataset.zip # ekstrak file zip

"""# About Dataset

Di seluruh dunia, kanker payudara adalah jenis kanker yang paling umum pada wanita dan tertinggi kedua dalam hal angka kematian. Diagnosis kanker payudara dilakukan ketika ditemukan benjolan abnormal (dari pemeriksaan sendiri atau x-ray) atau setitik kecil dari kalsium terlihat (pada x-ray). Setelah benjolan yang mencurigakan ditemukan, dokter akan melakukan diagnosis untuk menentukan apakah itu kanker dan, jika ya, apakah sudah menyebar ke bagian tubuh lainnya.

Dataset kanker payudara ini diperoleh dari University of Wisconsin Hospitals, Madison dari Dr. William H. Wolberg.

Link: https://www.kaggle.com/datasets/merishnasuwal/breast-cancer-prediction-dataset

# Import Library
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

"""# Import Dataset"""

df = pd.read_csv('Breast_cancer_data.csv')
df.head()

df.shape

df.diagnosis.value_counts()

"""# Mini EDA"""

df.info()

df.describe()

# Missing Value
df.isnull().sum()

df.hist(bins=50, figsize=(20,15))
plt.show()

plt.figure(figsize=(10, 8))
correlation_matrix = df.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""# Data Preparation"""

from sklearn.model_selection import train_test_split

X = df.drop(["diagnosis"],axis =1)
y = df["diagnosis"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, stratify=y, random_state = 42)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""# Modeling

## Random Forest
"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=100, random_state=42)
rfc.fit(X_train, y_train)

print('Accuracy Training: {:.2f} %'.format(rfc.score(X_train, y_train)*100))
print('Accuracy Testing: {:.2f} %'.format(rfc.score(X_test, y_test)*100))

"""## SVC"""

from sklearn.svm import SVC
svc = SVC(gamma='scale', kernel='rbf', C=2)
svc.fit(X_train, y_train)

print('Accuracy Training: {:.2f} %'.format(svc.score(X_train, y_train)*100))
print('Accuracy Testing: {:.2f} %'.format(svc.score(X_test, y_test)*100))

"""## XGBoost"""

from xgboost import XGBClassifier
xgb = XGBClassifier()
xgb.fit(X_train, y_train)

print('Accuracy Training: {:.2f} %'.format(xgb.score(X_train, y_train)*100))
print('Accuracy Testing: {:.2f} %'.format(xgb.score(X_test, y_test)*100))

"""# Evaluate

## Evaluate Random Forest
"""

# Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score
y_pred = rfc.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)
sns.heatmap(cm, annot=True)
accuracy_score(y_test, y_pred)

# Precision Recall F1-Score
from sklearn.metrics import f1_score
from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))
f1_score(y_test, y_pred, average=None)

"""## Evaluate SVC"""

# Confusion Matrix
y_pred2 = svc.predict(X_test)
cm2 = confusion_matrix(y_test, y_pred2)
print(cm2)
sns.heatmap(cm2, annot=True)
accuracy_score(y_test, y_pred2)

# Precision Recall F1-Score
print(classification_report(y_test, y_pred2))
f1_score(y_test, y_pred2, average=None)

"""## Evaluate XGBoost"""

# Confusion Matrix
y_pred3 = xgb.predict(X_test)
cm3 = confusion_matrix(y_test, y_pred3)
print(cm3)
sns.heatmap(cm3, annot=True)
accuracy_score(y_test, y_pred3)

"""# K-Fold Cross Validation

Hanya dua model yang akan di cek, yaitu XGBoost dan Random Forest
"""

# Random Forest Classifier
from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = rfc, X = X_train, y = y_train, cv = 3)
print("Accuracy: {:.2f} %".format(accuracies.mean()*100))
print("Standard Deviation: {:.2f} %".format(accuracies.std()*100))

# XGBoost
accuracies2 = cross_val_score(estimator = xgb, X = X_train, y = y_train, cv = 3)
print("Accuracy: {:.2f} %".format(accuracies2.mean()*100))
print("Standard Deviation: {:.2f} %".format(accuracies2.std()*100))

"""Dari hasil di atas Algoritma yang akan di pilih adalah XGBoost

# Save Model
"""

import pickle
filename = 'breast_cancer.pkl'
pickle.dump(xgb, open(filename, 'wb'))

"""# Load Model"""

loaded_model = pickle.load(open(filename, 'rb'))
result = loaded_model.score(X_test, y_test)
print('Accuracy: {:.2f} %'.format(result*100))

